apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rag.fullname" . }}
  labels:
    {{- include "rag.labels" . | nindent 4 }}
    rag-component: rag
spec:
  replicas: {{ .Values.rag.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{- include "rag.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.rag.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "rag.selectorLabels" . | nindent 8 }}
        {{- with .Values.rag.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ include "rag.fullname" . }}-rag
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          envFrom:
            - configMapRef:
                name: {{ include "rag.fullname" . }}-config
            {{- if .Values.rag.existingSecret }}
            - secretRef:
                name: {{ .Values.rag.existingSecret }}
            {{- end }}
          env:
            # PostgreSQL environment variables
            {{- if .Values.postgresql.enabled }}
              # Using PostgreSQL deployed by the chart
              - name: POSTGRES_USER
                value: {{ .Values.postgresql.auth.username }}
              - name: POSTGRES_DB
                value: {{ .Values.postgresql.auth.database }}
              - name: DB_HOST
                value: {{ .Release.Name }}-postgresql.{{ .Release.Namespace | lower }}.svc.cluster.local
              - name: DB_PORT
                value: {{ .Values.postgresql.service.port | default "5432" }}
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.postgresql.auth.existingSecret | default (include "rag.fullname" .) }}-vectordb
                    key: {{ .Values.postgresql.auth.existingSecretKey | default "postgres-password" }}
            {{- else if .Values.rag.existingPostgresSecret }}
              # Using existing PostgreSQL secret
              - name: POSTGRES_USER
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingPostgresSecret }}
                    key: POSTGRES_USER
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingPostgresSecret }}
                    key: POSTGRES_PASSWORD
              - name: POSTGRES_DB
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingPostgresSecret }}
                    key: POSTGRES_DB
              - name: DB_HOST
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingPostgresSecret }}
                    key: DB_HOST
              - name: DB_PORT
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingPostgresSecret }}
                    key: DB_PORT
            {{- end }}

            # OpenAI environment variables
            {{- if .Values.rag.existingOpenAISecret }}
              - name: RAG_OPENAI_BASEURL
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingOpenAISecret }}
                    key: RAG_OPENAI_BASEURL
              - name: RAG_OPENAI_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.rag.existingOpenAISecret }}
                    key: RAG_OPENAI_API_KEY
            {{- else if .Values.rag.openAI.createSecret }}
              - name: RAG_OPENAI_BASEURL
                valueFrom:
                  secretKeyRef:
                    name: {{ include "rag.fullname" . }}-openai
                    key: baseURL
              - name: RAG_OPENAI_API_KEY
                valueFrom:
                  secretKeyRef:
                    name: {{ include "rag.fullname" . }}-openai
                    key: apiKey
            {{- else }}
              - name: RAG_OPENAI_BASEURL
                value: {{ .Values.rag.openAI.baseURL }}
              - name: RAG_OPENAI_API_KEY
                value: {{ .Values.rag.openAI.apiKey }}
            {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

